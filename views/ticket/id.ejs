<%- include('../../components/header/_index.ejs') %>
<div id="ticket">
    <div
        class="rounded-bl-md pl-3 mb-2 transition-colors"
        :class="{
            'border-l-8 border-teal-200': ticket.status == 'new',  
            'border-l-8 border-amber-400 bg-amber-100 dark:bg-amber-900 dark:border-amber-700': ticket.status == 'in-progress',  
            'border-l-8 border-slate-400 bg-slate-100 text-slate-400': ticket.status == 'done',
            'lg:flex lg:mx-auto lg:w-8/12': user.access == 0,    
        }"
    >
        <div
            class="flex-1 flex flex-row items-center justify-between"
            :class="{'lg:col-start-3': user.access == 0}"
        >
            <div class="flex flex-row items-end">
                <div class="text-xl font-mono mr-3">{{ ticket.id }}</div>
                <div class="text-3xl font-medium">{{ ticket.title }}</div>
            </div>
            <div class="">
                <svg
                    v-if="loading"
                    fill="none"
                    class="w-8 h-8 animate-spin"
                    viewBox="0 0 32 32"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <path
                        clip-rule="evenodd"
                        d="M15.165 8.53a.5.5 0 01-.404.58A7 7 0 1023 16a.5.5 0 011 0 8 8 0 11-9.416-7.874.5.5 0 01.58.404z"
                        fill="currentColor"
                        fill-rule="evenodd"
                    />
                </svg>
            </div>
        </div>
    </div>

    <div
        :class="{'lg:grid grid-flow-col grid-cols-12 gap-4': user.access > 0, 'lg:flex flex-col items-center': user.access == 0}"
    >
        <div class="col-span-4" :class="{'lg:w-8/12 mb-2': user.access == 0}">
            <!-- DEETS -->
            <p class="text-xs text-teal-600 dark:text-teal-400 font-normal mb-1">Szczegóły</p>
            <div class="border border-slate-100 dark:border-slate-700 shadow-sm rounded-sm p-2">
                <div
                    class="flex flex-row items-center justify-between p-2 bg-slate-50 dark:bg-slate-800"
                >
                    <div class="text-xs text-slate-600 dark:text-slate-200">Utworzył</div>
                    <div class="text-xs font-medium">
                        {{ ticket.issuedBy }}
                    </div>
                </div>
                <div class="flex flex-row items-center justify-between p-2">
                    <div class="text-xs text-slate-600 dark:text-slate-200">Utworzono</div>
                    <div class="text-xs font-medium">
                        {{ createdOnReadable }}
                    </div>
                </div>
                <div
                    class="flex flex-row items-center justify-between p-2 bg-slate-50 dark:bg-slate-800"
                >
                    <div class="text-xs text-slate-600 dark:text-slate-200">Zaktualizowano</div>
                    <div class="text-xs font-medium">
                        {{ updatedOnReadable }}
                    </div>
                </div>
                <div class="flex flex-row items-center justify-between p-2">
                    <div class="text-xs text-slate-600 dark:text-slate-200">Status</div>
                    <div>
                        <select
                            v-if="user.access > 0"
                            v-model="ticket.status"
                            :selected="ticket.status"
                            class="w-48 bg-white border border-slate-200 dark:bg-slate-900 dark:border-slate-800 rounded-sm text-xs p-1"
                            @change="updateStatus"
                        >
                            <option
                                v-for="[key, value] in Object.entries(definition.status)"
                                :key="key"
                                :value="key"
                            >
                                {{ value }}
                            </option>
                        </select>
                        <div v-else class="rounded-sm text-xs text-right">
                            {{ definition.status[ticket.status] }}
                        </div>
                    </div>
                </div>
                <div
                    class="flex flex-row items-center justify-between p-2 bg-slate-50 dark:bg-slate-800"
                >
                    <div class="text-xs text-slate-600 dark:text-slate-200">Kategoria</div>
                    <div class="">
                        <select
                            v-if="user.access > 0"
                            v-model="ticket.category"
                            :selected="ticket.category"
                            class="w-48 bg-white border border-slate-200 dark:bg-slate-900 dark:border-slate-800 rounded-sm text-xs p-1"
                            @change="updateCategory"
                        >
                            <option
                                v-for="[key, value] in Object.entries(definition.category)"
                                :key="key"
                                :value="key"
                            >
                                {{ value }}
                            </option>
                        </select>
                        <div v-else class="rounded-sm text-xs text-right">
                            {{ definition.category[ticket.category] }}
                        </div>
                    </div>
                </div>
                <div class="flex flex-row items-center justify-between p-2">
                    <div class="text-xs text-slate-600 dark:text-slate-200">Priorytet</div>
                    <div class="flex items-center">
                        <svg
                            v-if="ticket.priority == 'none'"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            class="w-5 h-5 mr-1 fill-current text-teal-900"
                        >
                            <path
                                d="M9.609,19.2l-.6,3.974a1,1,0,0,1-.98.8.99.99,0,0,1-.2-.02,1,1,0,0,1-.781-1.179l.6-3.974a1,1,0,0,1,1.961.4ZM10,2.5A2.5,2.5,0,1,1,12.5,5,2.5,2.5,0,0,1,10,2.5ZM20,7a1,1,0,0,0-1,1v2H16.618L15.447,7.658A3,3,0,0,0,12.764,6H10.418A1.5,1.5,0,0,0,8.942,7.231l-1.049,5.76A2.988,2.988,0,0,0,9.2,16.08L13,18.543V23a1,1,0,0,0,2,0V18a1,1,0,0,0-.456-.839l-1.206-.783,1.13-6.206.637,1.275A1,1,0,0,0,16,12h3V23a1,1,0,0,0,2,0V8A1,1,0,0,0,20,7ZM6.4,15.893A2.7,2.7,0,0,1,5.67,16,2.765,2.765,0,0,1,3,12.971,7.68,7.68,0,0,1,7.065,6.676L5.91,12.61A4.974,4.974,0,0,0,6.4,15.893Z"
                            />
                        </svg>
                        <svg
                            v-if="ticket.priority == 'low'"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            class="w-5 h-5 mr-1 fill-current text-teal-500"
                        >
                            <g
                                id="_01_align_center"
                                data-name="01 align center"
                            >
                                <path
                                    d="M12,24A12,12,0,1,1,24,12,12.013,12.013,0,0,1,12,24ZM12,2A10,10,0,1,0,22,12,10.011,10.011,0,0,0,12,2Z"
                                />
                                <rect x="11" y="5" width="2" height="10" />
                                <rect x="11" y="17" width="2" height="2" />
                            </g>
                        </svg>
                        <svg
                            v-if="ticket.priority == 'medium'"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            class="w-5 h-5 mr-1 fill-current text-amber-500"
                        >
                            <g
                                id="_01_align_center"
                                data-name="01 align center"
                            >
                                <path
                                    d="M12,24A12,12,0,1,1,24,12,12.013,12.013,0,0,1,12,24ZM12,2A10,10,0,1,0,22,12,10.011,10.011,0,0,0,12,2Z"
                                />
                                <rect x="11" y="5" width="2" height="10" />
                                <rect x="11" y="17" width="2" height="2" />
                            </g>
                        </svg>
                        <svg
                            v-if="ticket.priority == 'high'"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            class="w-5 h-5 mr-1 fill-current text-red-500"
                        >
                            <path
                                d="M24,12A12,12,0,1,1,12,0,12.013,12.013,0,0,1,24,12ZM13,5H11V15h2Zm0,12H11v2h2Z"
                            />
                        </svg>
                        <div
                            v-if="ticket.priority == 'critical'"
                            class="flex flex-row align-middle items-center font-bold text-red-700"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                class="w-5 h-5 mr-1 fill-current"
                            >
                                <path
                                    d="M24,12A12,12,0,1,1,12,0,12.013,12.013,0,0,1,24,12ZM13,5H11V15h2Zm0,12H11v2h2Z"
                                />
                            </svg>
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                class="w-5 h-5 mr-1 fill-current"
                            >
                                <path
                                    d="M23,12a1,1,0,0,1-1,1H19.13a3.016,3.016,0,0,1-2.569-1.452L15.193,9.277,13.706,12.9a1,1,0,0,1-1.851-.758L13.555,8H11.616L9.552,13.032a1,1,0,0,0,.39,1.225l4.592,2.9A1,1,0,0,1,15,18v5a1,1,0,0,1-2,0V18.551l-4.126-2.6A3,3,0,0,1,7.7,12.273L9.454,8H7.236a.994.994,0,0,0-.894.552L4.895,11.447a1,1,0,0,1-1.79-.894l1.448-2.9A2.984,2.984,0,0,1,7.236,6h6.623A3.017,3.017,0,0,1,16.43,7.453l1.844,3.063A1.006,1.006,0,0,0,19.13,11H22A1,1,0,0,1,23,12ZM7.875,16.814a1,1,0,0,0-1.3.557A.994.994,0,0,1,5.646,18H3a1,1,0,0,0,0,2H5.646a2.987,2.987,0,0,0,2.786-1.886A1,1,0,0,0,7.875,16.814ZM15,5a2.5,2.5,0,1,0-2.5-2.5A2.5,2.5,0,0,0,15,5Z"
                                />
                            </svg>
                        </div>
                        <select
                            v-if="user.access > 0"
                            v-model="ticket.priority"
                            :selected="ticket.priority"
                            class="w-48 bg-white border border-slate-200 dark:bg-slate-900 dark:border-slate-800 rounded-sm text-xs p-1"
                            @change="updatePriority"
                        >
                            <option
                                v-for="[key, value] in Object.entries(definition.priority)"
                                :key="key"
                                :value="key"
                            >
                                {{ value }}
                            </option>
                        </select>
                        <div v-else class="rounded-sm text-xs text-right">
                            {{ definition.priority[ticket.priority] }}
                        </div>
                    </div>
                </div>
                <div
                    class="flex flex-row items-center justify-between p-2 bg-slate-50 dark:bg-slate-800"
                >
                    <div class="text-xs text-slate-600 dark:text-slate-200">Przypisane</div>
                    <div class="">
                        <autocomplete-input
                            :primary="'email'"
                            :secondary="'access'"
                            :apibase="'/user'"
                            :minchartoquery="2"
                            :placeholder="ticket.assignedTo"
                            @selected="assignUser"
                            v-if="user.access > 0"
                        ></autocomplete-input>
                        <div v-else class="w-48 rounded-sm text-xs text-right">
                            {{ ticket.assignedTo }}
                        </div>
                    </div>
                </div>
            </div>
            <!-- INVOLVED -->
            <p
                class="text-xs text-teal-600 dark:text-teal-400 font-normal mb-1 mt-2"
                v-if="user.access > 0"
            >
                Osoby
            </p>
            <div
                class="border border-slate-100 dark:border-slate-700 shadow-sm rounded-sm p-2"
                v-if="user.access > 0"
            >
                <div
                    v-for="(email, index) in ticket.involved"
                    :key="index"
                    class="flex flex-row items-center justify-between p-2"
                >
                    <div class="text-xs text-slate-600">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 24 24"
                            class="w-5 h-5 mr-1 fill-current text-teal-900 dark:text-teal-200"
                        >
                            <path
                                d="M12,12A6,6,0,1,0,6,6,6.006,6.006,0,0,0,12,12ZM12,2A4,4,0,1,1,8,6,4,4,0,0,1,12,2Z"
                            />
                            <path
                                d="M12,14a9.01,9.01,0,0,0-9,9,1,1,0,0,0,2,0,7,7,0,0,1,14,0,1,1,0,0,0,2,0A9.01,9.01,0,0,0,12,14Z"
                            />
                        </svg>
                    </div>
                    <div class="text-xs font-medium">
                        {{ email }}
                    </div>
                </div>
            </div>
        </div>

        <div class="col-span-8" :class="{'lg:w-8/12': user.access == 0}">
            <p class="text-xs text-teal-600 dark:text-teal-400 font-normal mb-1">Opis</p>
            <div
                v-html="ticket.description"
                class="overflow-x-auto px-4 py-2 border bg-slate-50 border-slate-100 dark:bg-slate-800 dark:border-slate-700 shadow-sm rounded-sm markdown-class"
                :class="{'max-h-52': user.access > 0 }"
                ></div>
            <p class="text-xs text-teal-600 dark:text-teal-400 font-normal mt-3 mb-1">Historia</p>
            <div
                class="flex bg-white border border-slate-200 dark:bg-slate-800 dark:border-slate-700 rounded-sm text-xs p-1 font-mono mb-2 shadow-sm"
            >
                <textarea
                    name="message"
                    id="message"
                    v-model="message"
                    :ref="'message'"
                    class="resize-none flex-1 h-16 p-2 mr-1 border border-slate-100 outline-none dark:bg-slate-800 dark:border-slate-700"
                ></textarea>
                <button
                    class="pr-2 pl-1 transition-colors rounded-sm flex flex-col items-center justify-center"
                    :class="{
                        'text-teal-500 hover:bg-teal-400 hover:text-teal-100': message.length > 0,
                        'text-slate-100': message.length < 1
                    }"
                    :disabled="message.length < 1"
                    @click="sendMessage"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 24 24"
                        class="w-5 h-5 ml-1 fill-current"
                    >
                        <path
                            d="M23.119.882a2.966,2.966,0,0,0-2.8-.8l-16,3.37a4.995,4.995,0,0,0-2.853,8.481L3.184,13.65a1,1,0,0,1,.293.708v3.168a2.965,2.965,0,0,0,.3,1.285l-.008.007.026.026A3,3,0,0,0,5.157,20.2l.026.026.007-.008a2.965,2.965,0,0,0,1.285.3H9.643a1,1,0,0,1,.707.292l1.717,1.717A4.963,4.963,0,0,0,15.587,24a5.049,5.049,0,0,0,1.605-.264,4.933,4.933,0,0,0,3.344-3.986L23.911,3.715A2.975,2.975,0,0,0,23.119.882ZM4.6,12.238,2.881,10.521a2.94,2.94,0,0,1-.722-3.074,2.978,2.978,0,0,1,2.5-2.026L20.5,2.086,5.475,17.113V14.358A2.978,2.978,0,0,0,4.6,12.238Zm13.971,7.17a3,3,0,0,1-5.089,1.712L11.762,19.4a2.978,2.978,0,0,0-2.119-.878H6.888L21.915,3.5Z"
                        />
                    </svg>
                </button>
            </div>
            <div v-for="(event, index) in reverseContent" :key="index">
                <div
                    class="border-slate-200 border-l flex flex-col h-5 mx-6 w-0 dark:border-slate-600"
                ></div>
                <!-- CREATED -->
                <div
                    v-if="event.type == 'created'"
                    class="bg-white dark:bg-slate-900 rounded-sm text-xs mx-2 p-2"
                >
                    <div class="flex flex-row">
                        <div
                            class="flex flex-col justify-center items-center mr-2"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                class="w-4 h-4 fill-current text-slate-700 dark:text-slate-300"
                            >
                                <path
                                    d="m18 9.064a3.049 3.049 0 0 0 -.9-2.164 3.139 3.139 0 0 0 -4.334 0l-11.866 11.869a3.064 3.064 0 0 0 4.33 4.331l11.87-11.869a3.047 3.047 0 0 0 .9-2.167zm-14.184 12.624a1.087 1.087 0 0 1 -1.5 0 1.062 1.062 0 0 1 0-1.5l7.769-7.77 1.505 1.505zm11.872-11.872-2.688 2.689-1.5-1.505 2.689-2.688a1.063 1.063 0 1 1 1.5 1.5zm-10.825-6.961 1.55-.442.442-1.55a1.191 1.191 0 0 1 2.29 0l.442 1.55 1.55.442a1.191 1.191 0 0 1 0 2.29l-1.55.442-.442 1.55a1.191 1.191 0 0 1 -2.29 0l-.442-1.55-1.55-.442a1.191 1.191 0 0 1 0-2.29zm18.274 14.29-1.55.442-.442 1.55a1.191 1.191 0 0 1 -2.29 0l-.442-1.55-1.55-.442a1.191 1.191 0 0 1 0-2.29l1.55-.442.442-1.55a1.191 1.191 0 0 1 2.29 0l.442 1.55 1.55.442a1.191 1.191 0 0 1 0 2.29zm-5.382-14.645 1.356-.387.389-1.358a1.042 1.042 0 0 1 2 0l.387 1.356 1.356.387a1.042 1.042 0 0 1 0 2l-1.356.387-.387 1.359a1.042 1.042 0 0 1 -2 0l-.387-1.355-1.358-.389a1.042 1.042 0 0 1 0-2z"
                                />
                            </svg>
                        </div>
                        <div class="flex-1">
                            <div class="flex justify-between">
                                <div class="font-bold text-slate-700 dark:text-slate-300">
                                    {{ event.owner }}
                                </div>
                                <div class="ml-1 font-light">
                                    {{ dateReadable(event.date) }}
                                </div>
                            </div>
                            Utworzono zgłoszenie "{{ ticket.title }}"
                        </div>
                    </div>
                </div>
                <!-- CATEGORY -->
                <div
                    v-if="event.type == 'category'"
                    class="bg-white dark:bg-slate-900 rounded-sm text-xs mx-2 p-2"
                >
                    <div class="flex flex-row">
                        <div
                            class="flex flex-col justify-center items-center mr-2"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                class="w-4 h-4 fill-current text-slate-700 dark:text-slate-300"
                            >
                                <path
                                    d="M22.2,2.163a4.992,4.992,0,0,0-4.1-1.081l-3.822.694A4,4,0,0,0,12,3.065,4,4,0,0,0,9.716,1.776L5.9,1.082A5,5,0,0,0,0,6V16.793a5,5,0,0,0,4.105,4.919l6.286,1.143a9,9,0,0,0,3.218,0L19.9,21.712A5,5,0,0,0,24,16.793V6A4.983,4.983,0,0,0,22.2,2.163ZM11,20.928c-.084-.012-.168-.026-.252-.041L4.463,19.745A3,3,0,0,1,2,16.793V6A3,3,0,0,1,5,3a3.081,3.081,0,0,1,.54.049l3.82.7A2,2,0,0,1,11,5.712Zm11-4.135a3,3,0,0,1-2.463,2.952l-6.285,1.142c-.084.015-.168.029-.252.041V5.712a2,2,0,0,1,1.642-1.968l3.821-.7A3,3,0,0,1,22,6Z"
                                />
                            </svg>
                        </div>
                        <div class="flex-1">
                            <div class="flex justify-between">
                                <div class="font-bold text-slate-700 dark:text-slate-300">
                                    {{ event.owner }}
                                </div>
                                <div class="ml-1 font-light">
                                    {{ dateReadable(event.date) }}
                                </div>
                            </div>
                            Zmieniono kategorię zgłoszenia na
                            {{ definition.category[event.change] }}
                        </div>
                    </div>
                </div>
                <!-- STATUS -->
                <div
                    v-if="event.type == 'status'"
                    class="bg-white dark:bg-slate-900 rounded-sm text-xs py-2 px-4"
                    :class="{'bg-green-300 border border-green-300 shadow-sm': event.change == 'done'}"
                >
                    <div class="flex flex-row">
                        <div
                            class="flex flex-col justify-center items-center mr-2"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                class="w-4 h-4 fill-current text-slate-700 dark:text-slate-300"
                                v-if="event.change == 'done'"
                            >
                                <path
                                    d="M19,0H5A5.006,5.006,0,0,0,0,5V19a5.006,5.006,0,0,0,5,5H19a5.006,5.006,0,0,0,5-5V5A5.006,5.006,0,0,0,19,0Zm3,19a3,3,0,0,1-3,3H5a3,3,0,0,1-3-3V5A3,3,0,0,1,5,2H19a3,3,0,0,1,3,3Z"
                                />
                                <path
                                    d="M9.333,15.919,5.414,12A1,1,0,0,0,4,12H4a1,1,0,0,0,0,1.414l3.919,3.919a2,2,0,0,0,2.829,0L20,8.081a1,1,0,0,0,0-1.414h0a1,1,0,0,0-1.414,0Z"
                                />
                            </svg>
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                class="w-4 h-4 fill-current text-slate-700 dark:text-slate-300"
                                v-else
                            >
                                <path
                                    d="m19 1h-14a5.006 5.006 0 0 0 -5 5v8a5.006 5.006 0 0 0 5 5h6v2h-4a1 1 0 0 0 0 2h10a1 1 0 0 0 0-2h-4v-2h6a5.006 5.006 0 0 0 5-5v-8a5.006 5.006 0 0 0 -5-5zm3 13a3 3 0 0 1 -3 3h-14a3 3 0 0 1 -3-3v-8a3 3 0 0 1 3-3h14a3 3 0 0 1 3 3zm-2-4a1 1 0 0 1 -1 1h-2.965l-1.7 2.555a1 1 0 0 1 -.835.445c-.021 0-.042 0-.062 0a1 1 0 0 1 -.833-.551l-2.229-4.461-1.044 1.567a1 1 0 0 1 -.832.445h-3.5a1 1 0 0 1 0-2h2.965l1.7-2.555a.987.987 0 0 1 .897-.445 1 1 0 0 1 .833.551l2.229 4.459 1.044-1.567a1 1 0 0 1 .832-.443h3.5a1 1 0 0 1 1 1z"
                                />
                            </svg>
                        </div>
                        <div class="flex-1">
                            <div class="flex justify-between">
                                <div class="font-bold text-slate-700 dark:text-slate-300">
                                    {{ event.owner }}
                                </div>
                                <div class="ml-1 font-light">
                                    {{ dateReadable(event.date) }}
                                </div>
                            </div>
                            Zmieniono status zgłoszenia na
                            {{ definition.status[event.change] }}
                        </div>
                    </div>
                </div>
                <!-- PRIORITY -->
                <div
                    v-if="event.type == 'priority'"
                    class="bg-white dark:bg-slate-900 rounded-sm text-xs mx-2 p-2"
                >
                    <div class="flex flex-row">
                        <div
                            class="flex flex-col justify-center items-center mr-2"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                class="w-4 h-4 fill-current text-slate-700 dark:text-slate-300"
                            >
                                <g
                                    id="_01_align_center"
                                    data-name="01 align center"
                                >
                                    <path
                                        d="M12,24A12,12,0,1,1,24,12,12.013,12.013,0,0,1,12,24ZM12,2A10,10,0,1,0,22,12,10.011,10.011,0,0,0,12,2Z"
                                    />
                                    <rect x="11" y="5" width="2" height="10" />
                                    <rect x="11" y="17" width="2" height="2" />
                                </g>
                            </svg>
                        </div>
                        <div class="flex-1">
                            <div class="flex justify-between">
                                <div class="font-bold text-slate-700 dark:text-slate-300">
                                    {{ event.owner }}
                                </div>
                                <div class="ml-1 font-light">
                                    {{ dateReadable(event.date) }}
                                </div>
                            </div>
                            Zmieniono priorytet zgłoszenia na
                            {{ definition.priority[event.change] }}
                        </div>
                    </div>
                </div>
                <!-- ASSIGN -->
                <div
                    v-if="event.type == 'assign'"
                    class="bg-white dark:bg-slate-900 rounded-sm text-xs mx-2 p-2"
                >
                    <div class="flex flex-row">
                        <div
                            class="flex flex-col justify-center items-center mr-2"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                class="w-4 h-4 fill-current text-slate-700 dark:text-slate-300"
                            >
                                <path
                                    d="M12,12A6,6,0,1,0,6,6,6.006,6.006,0,0,0,12,12ZM12,2A4,4,0,1,1,8,6,4,4,0,0,1,12,2Z"
                                />
                                <path
                                    d="M12,14a9.01,9.01,0,0,0-9,9,1,1,0,0,0,2,0,7,7,0,0,1,14,0,1,1,0,0,0,2,0A9.01,9.01,0,0,0,12,14Z"
                                />
                            </svg>
                        </div>
                        <div class="flex-1">
                            <div class="flex justify-between">
                                <div class="font-bold text-slate-700 dark:text-slate-300">
                                    {{ event.owner }}
                                </div>
                                <div class="ml-1 font-light">
                                    {{ dateReadable(event.date) }}
                                </div>
                            </div>
                            Zgłoszenie zostało przypisane do
                            <b>{{ event.change }}</b>
                        </div>
                    </div>
                </div>
                <!-- MAIL -->
                <div
                    v-if="event.type == 'mail'"
                    class="bg-white dark:bg-slate-900 rounded-sm text-xs mx-2 p-2"
                >
                    <div class="flex flex-row">
                        <div
                            class="flex flex-col justify-center items-center mr-2"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                class="w-4 h-4 fill-current text-slate-700 dark:text-slate-300"
                            >
                                <path
                                    d="M19,1H5A5.006,5.006,0,0,0,0,6V18a5.006,5.006,0,0,0,5,5H19a5.006,5.006,0,0,0,5-5V6A5.006,5.006,0,0,0,19,1ZM5,3H19a3,3,0,0,1,2.78,1.887l-7.658,7.659a3.007,3.007,0,0,1-4.244,0L2.22,4.887A3,3,0,0,1,5,3ZM19,21H5a3,3,0,0,1-3-3V7.5L8.464,13.96a5.007,5.007,0,0,0,7.072,0L22,7.5V18A3,3,0,0,1,19,21Z"
                                />
                            </svg>
                        </div>
                        <div class="flex-1">
                            <div class="flex justify-between">
                                <div class="font-normal text-slate-700 dark:text-slate-300">
                                    Wysłano komunikat do {{ event.owner }}
                                </div>
                                <div class="ml-1 font-light">
                                    {{ dateReadable(event.date) }}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- MESSAGE -->
                <div
                    v-if="event.type == 'message'"
                    class="bg-white dark:bg-slate-900 border rounded-sm text-xs p-4 shadow-sm"
                    :class="{
                        'border-slate-500': event.owner != user.email,
                        'border-slate-300': event.owner == user.email,
                    }"
                >
                    <div class="flex flex-row">
                        <div
                            class="flex flex-col justify-start items-center mr-2"
                        >
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 24 24"
                                class="w-4 h-4 fill-current text-slate-700 dark:text-slate-300"
                            >
                                <path
                                    d="M20,0H4A4,4,0,0,0,0,4V16a4,4,0,0,0,4,4H6.9l4.451,3.763a1,1,0,0,0,1.292,0L17.1,20H20a4,4,0,0,0,4-4V4A4,4,0,0,0,20,0Zm2,16a2,2,0,0,1-2,2H17.1a2,2,0,0,0-1.291.473L12,21.69,8.193,18.473h0A2,2,0,0,0,6.9,18H4a2,2,0,0,1-2-2V4A2,2,0,0,1,4,2H20a2,2,0,0,1,2,2Z"
                                />
                                <path
                                    d="M7,7h5a1,1,0,0,0,0-2H7A1,1,0,0,0,7,7Z"
                                />
                                <path
                                    d="M17,9H7a1,1,0,0,0,0,2H17a1,1,0,0,0,0-2Z"
                                />
                                <path
                                    d="M17,13H7a1,1,0,0,0,0,2H17a1,1,0,0,0,0-2Z"
                                />
                            </svg>
                        </div>
                        <div class="flex-1">
                            <div class="flex justify-between">
                                <div class="font-bold text-slate-700 dark:text-slate-300">
                                    {{ event.owner }}
                                </div>
                                <div class="ml-1 font-light">
                                    {{ dateReadable(event.date) }}
                                </div>
                            </div>
                            <div class="flex flex-row">
                                <div
                                    class="markdown-class py-1 flex-1"
                                    v-html="event.message"
                                ></div>
                                <div class="pl-1 flex items-end">
                                    <button
                                        @click="quoteMessage(event.owner, event.message_md)"
                                        class="hover:text-slate-800 text-slate-300 dark:text-slate-700 dark:hover:text-slate-400 transition-colors"
                                    >
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            viewBox="0 0 24 24"
                                            class="w-4 h-4 fill-current"
                                        >
                                            <path
                                                d="M23,24a1,1,0,0,1-1-1,6.006,6.006,0,0,0-6-6H10.17v1.586A2,2,0,0,1,6.756,20L.877,14.121a3,3,0,0,1,0-4.242L6.756,4A2,2,0,0,1,10.17,5.414V7H15a9.01,9.01,0,0,1,9,9v7A1,1,0,0,1,23,24ZM8.17,5.414,2.291,11.293a1,1,0,0,0,0,1.414L8.17,18.586V16a1,1,0,0,1,1-1H16a7.984,7.984,0,0,1,6,2.714V16a7.008,7.008,0,0,0-7-7H9.17a1,1,0,0,1-1-1Z"
                                            />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<script>
    Vue.component('autocomplete-input', {
        props: {
    		primary: String,
    		secondary: String,
    		apibase: String,
    		minchartoquery: Number,
    		placeholder: String
    	},
    	data() {
    		return {
    			Input: '',
    			Results: null,
    			ShowResults: false,
    			EnterStop: false,
    			PosY: 0
    		}
    	},
    	methods: {
    		async Fetch() {
    			this.Results = await axios
    				.get(`${this.apibase}/${this.Input}`)
    				.then(response => {
    					this.ShowResults = true
    					return response.data
    				})
    				.catch(error => {
    					this.ShowResults = false
    					console.log(error)
    				})
    		},
    		KeyMonitor(Event) {
    			if (Event.key == 'ArrowUp') {
    				if (this.PosY > 0) {
    					this.PosY--
    				}
    			} else if (Event.key == 'ArrowDown') {
    				if (this.Results && this.PosY < this.Results.length - 1) {
    					this.PosY++
    				}
    			} else if (Event.key == 'Enter') {
    				this.Select()
    			} else if (Event.key == 'Tab' || Event.key == 'Escape') {
    				this.ShowResults = false
    			}
    		},
    		Select() {
    			this.ShowResults = false
    			this.$emit('selected', this.Results[this.PosY])
    			this.Input = String(this.Results[this.PosY][this.primary])
    			this.EnterStop = true
    		}
    	},
    	watch: {
    		async Input(N, O) {
    			if (!this.EnterStop) {
    				this.PosY = 0
    				if (N.length >= this.minchartoquery) {
    					await this.Fetch()
    				} else this.ShowResults = false
    			} else this.EnterStop = false
    		},
    		Results(N) {
    			// console.log(this.Results)
    		}
    	},
      template: `
        <div class="my-0.5">
    		<input
    			type="text"
    			v-model="Input"
    			class="w-64 bg-white border border-slate-200 dark:bg-slate-900 dark:border-slate-800 rounded-sm text-xs p-1 text-right"
    			@keyup="KeyMonitor"
    			:placeholder="placeholder"
    		/>
    		<div class="relative">
    			<div class="absolute w-full bg-white text-slate-900 shadow-md rounded-sm text-xs" v-if="ShowResults">
    				<div
    					class="p-1 cursor-pointer overflow-hidden"
    					v-for="(Item, Index) in Results"
    					:key="Index"
    					:class="{ 'text-teal-500': Index == PosY }"
    					@mouseover="PosY = Index"
    					@click="Select"
    				>
    					<div class="text-xs">{{ Item[primary] }}</div>
    					<!-- <div class="text-xs">
    						{{ Item[secondary] }}
    					</div> -->
    				</div>
    			</div>
    		</div>
    	</div>
        `
    })


            var vm = new Vue({
                el: "#ticket",
                data() {
                    return {
                        definition: <%- JSON.stringify(definition) %>,
                        ticket: <%- JSON.stringify(ticket) %>,
                        user: <%- JSON.stringify(req.loggedIn) %>,
                        message: '',
                        loading: false,
                    }
                },
                computed: {
                    createdOnReadable() {
                        let temp = new Date(this.ticket.createdOn)
                        return temp.toLocaleString()
                    },
                    updatedOnReadable() {
                        let temp = new Date(this.ticket.updatedOn)
                        return temp.toLocaleString()
                    },
                    reverseContent() {
                        // return this.ticket.content
                        return this.ticket.content.reverse()
                    }
                },
                created() {
                    this.timer = setInterval(this.update, 5000);
                },
                methods: {
                    async assignUser(e) {
                        if(this.ticket.assignedTo != e.email) {
                            await axios.post("/ticket/update/assign", {
                                id: this.ticket.id,
                                assignedTo: e.email
                            }).then(async (response) => {
                                // loading pewnie jeszcze
                                await this.update()
                            }).catch((error) => {
                                console.log(error)
                            })
                        }
                    },
                    dateReadable(date) {
                        let temp = new Date(date)
                        return temp.toLocaleString()
                    },
                    quoteMessage(owner, messageQuoted) {
                        let messageSplit = messageQuoted.split('\n')
                        let prepareMessage = [`> **${owner}**\n> `]
                        messageSplit.forEach(element => {
                            prepareMessage.push("> " + element)
                        });
                        this.message = prepareMessage.join('\n') + "\n"
                        setTimeout(() => {this.$refs.message.focus()})
                    },
                    async update() {
                        this.loading = true
                        this.ticket = await axios.post("/ticket/info", {
                            id: this.ticket.id,
                        }).then((response) => {
                            this.loading = false
                            return response.data
                        }).catch((error) => {
                            console.log(error)
                            this.loading = false
                        })
                    },
                    async sendMessage() {
                        await axios.post("/ticket/message", {
                            id: this.ticket.id,
                            message: this.message
                        }).then(async (response) => {
                            this.message = '';
                            await this.update()
                        }).catch((error) => {
                            console.log(error)
                        })
                    },
                    async updateStatus() {
                        await axios.post("/ticket/update/status", {
                            id: this.ticket.id,
                            status: this.ticket.status
                        }).then(async (response) => {
                            // SUCCESS
                            await this.update()
                        }).catch((error) => {
                            console.log(error)
                        })
                    },
                    async updateCategory() {
                        await axios.post("/ticket/update/category", {
                            id: this.ticket.id,
                            category: this.ticket.category
                        }).then(async (response) => {
                            // SUCCESS
                            await this.update()
                        }).catch((error) => {
                            console.log(error)
                        })
                    },
                    async updatePriority() {
                        await axios.post("/ticket/update/priority", {
                            id: this.ticket.id,
                            priority: this.ticket.priority
                        }).then(async (response) => {
                            // SUCCESS
                            await this.update()
                        }).catch((error) => {
                            console.log(error)
                        })
                    },
                },
            })
</script>

<%- include('../../components/footer/_index.ejs') %>
